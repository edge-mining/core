[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "edge-mining"
version = "0.1.0"
description = "Software to optimize the use of excess energy, especially from renewable sources, through Bitcoin mining"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Edge Mining Team", email = "asd@asd.it"}
]
maintainers = [
    {name = "Edge Mining Team", email = "asd@asd.it"}
]
classifiers = [
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Distributed Computing",
    "Topic :: Utilities",
]
keywords = [
    "bitcoin",
    "mining",
    "energy",
    "renewable",
    "solar",
    "automation",
    "asic",
    "optimization",
    "homeassistant",
    "hexagonal-architecture",
    "domain-driven-design",
]
requires-python = ">=3.11"
dependencies = [
    "pydantic>=2.8.2",
    "pyyaml>=6.0.2",
    "pydantic-settings>=2.8.1",
    "apscheduler>=3.11.0",
    "click>=8.1.8",
    "loguru>=0.7.3",
]

[project.optional-dependencies]
api = [
    "fastapi>=0.115.12",
    "uvicorn[standard]>=0.34.1",
]
homeassistant = [
    "homeassistant_api>=5.0.0",
]
mqtt = [
    "paho-mqtt>=2.1.0",
]
telegram = [
    "python-telegram-bot>=20.0",
]
solar = [
    "astral>=3.2",
]
pyasic = [
    "pyasic==0.76.5"
]
all = [
    "edge-mining[api,homeassistant,mqtt,telegram,solar]",
]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "mypy",
    "ruff",
    "bandit",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/edge-mining/core"
Documentation = "https://github.com/edge-mining/docs"
Repository = "https://github.com/edge-mining/core"
"Bug Tracker" = "https://github.com/edge-mining/core/issues"
Changelog = "https://github.com/edge-mining/core/blob/main/CHANGELOG.md"

[project.scripts]
edge-mining = "edge_mining.__main__:main"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
explicit_package_bases = true
disable_error_code = ["call-overload"]
exclude = [
    "tests/.*\\.py$",
    "__pycache__/",
    "\\.venv/",
    "venv/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
line-length = 120
indent-width = 4
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "tests",
    "venv",
]

[tool.ruff.lint]
select = ["E", "F", "W", "B"]
fixable = ["ALL"]
unfixable = []
# Add BLE001 to ignore catching too general exception
ignore = ["BLE001", "B008"]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-v",
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["edge_mining"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601", "B311", "B104"]
